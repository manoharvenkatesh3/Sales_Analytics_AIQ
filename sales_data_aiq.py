# -*- coding: utf-8 -*-
"""sales_data_AIQ.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VK5VCo3wXUegEyBWUyrWmN4GAM5cGi4X
"""

# Import required libraries
import pandas as pd
import requests
import sqlalchemy
import os

# Set up API keys as environment variables
os.environ['OPENWEATHERMAP_API_KEY'] = 'e9005334bb02cbfd470051804f3f731d'

import pandas as pd

# Load the sales data CSV file into a pandas DataFrame
sales_df = pd.read_csv('/content/sample_data/sales_data.csv')

# Convert order_id, customer_id, and product_id columns to integers
sales_df.dtypes[['order_id']] = int
sales_df.dtypes[['customer_id']] = int
sales_df.dtypes[['product_id']] = int

# Convert quantity and price columns to floats
#sales_df[['quantity']] = pd.to_float64(sales_df['quantity'])
#sales_df[['price']] = pd.to_float64(sales_df['price'])
sales_df.dtypes['quantity'] = float
sales_df.dtypes['price'] = float

# Convert order_date column to datetime format
sales_df['order_date'] = pd.to_datetime(sales_df['order_date'])

# Handle missing values in quantity and price columns
sales_df.fillna(0, inplace=True)

# Drop rows with missing values in order_id, customer_id, or product_id columns
sales_df.dropna(subset=['order_id', 'customer_id', 'product_id'], inplace=True)

# Print the cleaned and preprocessed DataFrame
print(sales_df)

# Define a function to fetch user data from the JSONPlaceholder API
def fetch_user_data(user_ids):
    url = 'https://jsonplaceholder.typicode.com/users'
    response = requests.get(url, params={'ids': ','.join(map(str, user_ids))})
    user_data = response.json()
    return user_data

# Extract relevant fields and merge user data with sales data
user_ids = sales_df['customer_id'].unique()
user_data = fetch_user_data(user_ids)
user_sales_df = pd.json_normalize(user_data)[['id', 'name', 'username', 'email', 'address.geo.lat', 'address.geo.lng']]
merged_df = pd.merge(sales_df, user_sales_df, left_on='customer_id', right_on='id', how='left')
merged_df = merged_df.rename(columns={'price':'sales_amount','quantity':'order_quantity','address.geo.lat':'lat','address.geo.lng':'lon'})
print(merged_df)

import json
import requests

def get_weather_data(lat, lon):
    api_key = os.getenv('OPENWEATHERMAP_API_KEY')
    url = f'https://api.openweathermap.org/data/2.5/weather'
    params = {'lat': lat, 'lon': lon, 'appid': api_key, 'units': 'metric'}
    response = requests.get(url, params=params)
    weather_data = response.json()
    return weather_data

def extract_weather_info(weather_data):
    weather_info = {
        'temperature': weather_data['main']['temp'],
        'conditions': weather_data['weather'][0]['description']
    }
    return weather_info

# Assuming merged_df has 'lat' and 'lon' columns
# Add weather data
merged_df['weather_data'] = merged_df.apply(lambda row: extract_weather_info(get_weather_data(row['lat'], row['lon'])), axis=1)
print(merged_df)

!pip install pyodbc
import sqlalchemy
import pyodbc
# Calculate total sales amount per customer
customer_sales = merged_df.groupby(['customer_id','name'])['sales_amount'].sum().reset_index()
customer_sales.columns = ['customer_id','Customer_Name','Total_sales_amt_per_customer']
print("Total Sales Amount Per Customer:")
print(customer_sales)

# Creating customer_sales table in SQLite Environment
import sqlite3
conn = sqlite3.connect('sales_analytics_database.db')
customer_sales.to_sql('customer_sales', conn, if_exists='replace', index=False)
result = pd.read_sql_query('SELECT * FROM customer_sales', conn)
print(result)
table_definition = conn.execute('PRAGMA table_info(customer_sales)')
for row in table_definition:
    print(row)
conn.close()

import matplotlib.pyplot as plt

# Create a bar plot
plt.figure(figsize=(10, 6))
plt.bar(customer_sales['Customer_Name'], customer_sales['Total_sales_amt_per_customer'])
plt.xlabel('Customer Name')
plt.ylabel('Total Sales Amount')
plt.title('Total Sales Amount Per Customer')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Create a pie chart
plt.figure(figsize=(8, 8))
plt.pie(customer_sales['Total_sales_amt_per_customer'], labels=customer_sales['Customer_Name'], autopct='%1.1f%%', startangle=140)
plt.axis('equal')
plt.title('Total Sales Amount Percentage Per Customer')
plt.tight_layout()
plt.show()

# Determine the average order quantity per product
product_quantity = merged_df.groupby(['customer_id','product_id'])['order_quantity'].mean().reset_index()
product_quantity.columns = ['customer_id','product_id', 'avg_order_quantity']

print('Average Order Quantity per Product:')
print(product_quantity.head(100))

# Creating Average_product_quantity table in SQLite Environment
conn = sqlite3.connect('sales_analytics_database.db')
product_quantity.to_sql('Average_product_quantity', conn, if_exists='replace', index=False)
result = pd.read_sql_query('SELECT * FROM Average_product_quantity', conn)
print(result)
table_definition = conn.execute('PRAGMA table_info(Average_product_quantity)')
for row in table_definition:
    print(row)
conn.close()

import matplotlib.pyplot as plt

# Create a bar plot
plt.figure(figsize=(10, 6))
plt.bar(product_quantity['product_id'], product_quantity['avg_order_quantity'])
plt.xlabel('Product ID')
plt.ylabel(' Average Order Quantity')
plt.title('Average Order Per Quantity by Product ID')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Identify the top-selling products and customers
top_sellers = merged_df.groupby(['product_id', 'customer_id'])['sales_amount'].sum().reset_index()
top_sellers = top_sellers.rename(columns={'sales_amount': 'total_sales_prod_by_cust'})
top_sellers = top_sellers.sort_values('total_sales_prod_by_cust', ascending=False)

# Identify the top 5 customers based on total sales
top_customers = customer_sales.nlargest(5, columns=['Total_sales_amt_per_customer'])

# Identify the top 5 products based on total sales
top_products = top_sellers.nlargest(5, columns=['total_sales_prod_by_cust'])

# Print the top customers and products
print("Top Customers:")
print(top_customers)
print("\nTop Products:")
print(top_products)

# Creating Top_Customers table in SQLite Environment
conn = sqlite3.connect('sales_analytics_database.db')
top_customers.to_sql('Top_Customers', conn, if_exists='replace', index=False)
result = pd.read_sql_query('SELECT * FROM Top_Customers', conn)
print(result)
table_definition = conn.execute('PRAGMA table_info(Top_Customers)')
for row in table_definition:
    print(row)
conn.close()

# Creating Top_Products table in SQLite Environment
conn = sqlite3.connect('sales_analytics_database.db')
top_products.to_sql('Top_Products', conn, if_exists='replace', index=False)
result = pd.read_sql_query('SELECT * FROM Top_Products', conn)
print(result)
table_definition = conn.execute('PRAGMA table_info(Top_Products)')
for row in table_definition:
    print(row)
conn.close()

import matplotlib.pyplot as plt

# Create a figure with subplots
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Bar plot for top customers
axes[0].bar(top_customers['Customer_Name'], top_customers['Total_sales_amt_per_customer'], color='skyblue')
axes[0].set_title('Top 5 Customers')
axes[0].set_xlabel('Customer Name')
axes[0].set_ylabel('Total Sales Amount')

# Rotate x-axis labels for better readability
axes[0].tick_params(axis='x', rotation=45)

# Bar plot for top products
axes[1].bar(top_products['product_id'], top_products['total_sales_prod_by_cust'], color='lightgreen')
axes[1].set_title('Top 5 Products')
axes[1].set_xlabel('Product ID')
axes[1].set_ylabel('Total Sales Amount')

# Adjust layout to prevent overlap
plt.tight_layout()

# Show plots
plt.show()

# Analyze sales trends over time
# Convert 'order_date' column to datetime
merged_df['order_date'] = pd.to_datetime(merged_df['order_date'])

# Group by month and calculate sales trends
month_sales_trends = merged_df.groupby(pd.Grouper(key='order_date', freq='M'))['sales_amount'].sum().reset_index()
print('Month_sales_trends:')
print(month_sales_trends)

# Group by Quaterly and calculate sales trends
Quarterly_sales_trends = merged_df.groupby(pd.Grouper(key='order_date', freq='Q'))['sales_amount'].sum().reset_index()
print('\nQuarterly_sales_trends:')
print(Quarterly_sales_trends)

# Creating Month_Sales_Trend table in SQLite Environment
conn = sqlite3.connect('sales_analytics_database.db')
month_sales_trends.to_sql('Month_Sales_Trend', conn, if_exists='replace', index=False)
result = pd.read_sql_query('SELECT * FROM Month_Sales_Trend', conn)
print(result)
table_definition = conn.execute('PRAGMA table_info(Month_Sales_Trend)')
for row in table_definition:
    print(row)
conn.close()

# Creating Quarterly_Sales table in SQLite Environment
conn = sqlite3.connect('sales_analytics_database.db')
Quarterly_sales_trends.to_sql('Quarterly_Sales', conn, if_exists='replace', index=False)
result = pd.read_sql_query('SELECT * FROM Quarterly_Sales', conn)
print(result)
table_definition = conn.execute('PRAGMA table_info(Quarterly_Sales)')
for row in table_definition:
    print(row)
conn.close()

import matplotlib.pyplot as plt

# Set the figure size
plt.figure(figsize=(12, 6))

# Plot monthly sales trends
plt.plot(month_sales_trends['order_date'], month_sales_trends['sales_amount'], marker='o', color='blue', label='Monthly Sales Trends')

# Plot quarterly sales trends
plt.plot(Quarterly_sales_trends['order_date'], Quarterly_sales_trends['sales_amount'], marker='s', color='green', label='Quarterly Sales Trends')

# Set titles and labels
plt.title('Sales Trends Over Time')
plt.xlabel('Date')
plt.ylabel('Total Sales Amount')

# Add a legend
plt.legend()

# Rotate x-axis labels for better readability
plt.xticks(rotation=45)

# Show the plot
plt.grid(True)
plt.tight_layout()
plt.show()

# Include weather data in the analysis
weather_conditions = merged_df['weather_data'].apply(lambda x: x['conditions']).value_counts()
print(weather_conditions)
avg_sales_by_condition = merged_df.groupby(merged_df['weather_data'].apply(lambda x: x['conditions']))['sales_amount'].mean().reset_index()
avg_sales_by_condition.columns = ['weather_condition', 'avg_sales']
print(avg_sales_by_condition)

# Creating Avg_Sales_Weather table in SQLite Environment
conn = sqlite3.connect('sales_analytics_database.db')
avg_sales_by_condition.to_sql('Avg_Sales_Weather', conn, if_exists='replace', index=False)
result = pd.read_sql_query('SELECT * FROM Avg_Sales_Weather', conn)
print(result)
table_definition = conn.execute('PRAGMA table_info(Avg_Sales_Weather)')
for row in table_definition:
    print(row)
conn.close()

# Pie chart: Distribution of Sales Amount Per Weather Condition
plt.figure(figsize=(8, 8))
plt.pie(avg_sales_by_condition['avg_sales'], labels=avg_sales_by_condition['weather_condition'], autopct='%1.1f%%', startangle=140)
plt.axis('equal')
plt.title('Distribution of Sales Amount Per Weather Condition')
plt.tight_layout()